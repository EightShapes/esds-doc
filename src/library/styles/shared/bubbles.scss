$tail-size: 8px; // If tail size needs to change, it should be reset in the component's sass and the bubble mixin and bubble-positioner mixin must be recalled

// Function to help with flip flopping directions --------
@function opposite-direction($directions) {
    $opposite-directions: ();
    $direction-map: (
        'top':    'bottom',
        'right':  'left',
        'bottom': 'top',
        'left':   'right'
    );

    @each $direction in $directions {
        $direction: to-lower-case($direction);

        @if map-has-key($direction-map, $direction) { 
            $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
        } 
    }

    @return $opposite-directions;
}

// Generates and positions the 12 tail options on bubbles --------
@mixin tail($direction, $tail-color, $tail-size, $corner, $is-border, $border-width) {
    border-#{opposite-direction($direction)}: ($tail-size) solid $tail-color;
    content: '';
    height: 0;
    position: absolute;
    width: 0;



    $perpendicular-borders: $tail-size solid transparent;
    
    @if $direction == top {
        bottom: 100%;
        @if not $is-border {
            margin-bottom: -($border-width);
        }
    } @else if $direction == right {
        left: 100%;
        @if not $is-border {
            margin-left: -($border-width);
        }
    } @else if $direction == bottom {
        top: 100%;
        @if not $is-border {
            margin-top: -($border-width);
        }
    } @else if $direction == left {
        right: 100%;
        @if not $is-border {
            margin-right: -($border-width);
        }
    }



    @if $direction == top or $direction == bottom {
        @if $corner == null {
            border-left:   $perpendicular-borders;
            border-right:  $perpendicular-borders;
            left: 50%;
            margin-left: -($tail-size);
        } @else if $corner == corner-left {
            border-left:   0;
            border-right:  $perpendicular-borders;
            @if $is-border {
                left: -($border-width);
            } @else {
                left: 0;
            }
        } @else if $corner == corner-right {
            border-left:   $perpendicular-borders;
            border-right:  0;
            @if $is-border {
                right: -($border-width);
            } @else {
                right: 0;
            }
        }
    } @else if $direction == right or $direction == left {
        @if $corner == null {
            border-bottom: $perpendicular-borders;
            border-top:    $perpendicular-borders;
            margin-top: -($tail-size);
            top: 50%;
        } @else if $corner == corner-top {
            border-bottom: $perpendicular-borders;
            border-top:    0;
            @if $is-border {
                top: -($border-width);
            } @else {
                top: 0;
            }
        }  @else if $corner == corner-bottom {
            border-bottom: 0;
            border-top:    $perpendicular-borders;
            @if $is-border {
                bottom: -($border-width);
            } @else {
                bottom: 0;
            }
        }
    }
}

// Generates complete bubble, uses tail mixin for arrow and optional border --------
@mixin bubble($direction, $corner: null, $has-border: false, $top-tail-color: $mds-color-white, $border-tail-color: $mds-color-neutral-80, $border-width: 1px) {
    @if $top-tail-color == tooltip--default {
        $top-tail-color: $mds-color-neutral-90;
    } @else if $top-tail-color == tooltip--flag {
        $top-tail-color: $mds-color-green-34;
    } @else if $top-tail-color == tooltip--prompt {
        $top-tail-color: $mds-color-neutral-37;
    } @else if $top-tail-color == tooltip--error {
        $top-tail-color: $mds-color-red-50;
    }

    &:after {
        @include tail($direction, $top-tail-color, $tail-size, $corner, false, $border-width); 
    }

    @if $has-border {
        border: $border-width solid $border-tail-color;

        &:before {
            @include tail($direction, $border-tail-color, $tail-size + $border-width, $corner, true, $border-width);
        }
    }
}

// Positions the complete bubble at the correct spot on the target --------
@mixin bubble-positioner($side, $corner) {
    @if $side == top {
        bottom: 100%;
        margin-bottom: $tail-size;
        @if $corner == center {
            left: 50%;
        }
        @if $corner == right {
            border-bottom-left-radius: 0;
        }
        @if $corner == left {
            border-bottom-right-radius: 0;
        }
    } @else if $side == bottom {
        margin-top: $tail-size;
        top: 100%;
        @if $corner == center {
            left: 50%;
        }
        @if $corner == right {
            border-top-left-radius: 0;
        }
        @if $corner == left {
            border-top-right-radius: 0;
        }
    } @else if $side == right {
        left: 100%;
        margin-left: $tail-size;
        @if $corner == center {
            top: 50%;
        }
        @if $corner == bottom {
            border-top-left-radius: 0;
        }
        @if $corner == top {
            border-bottom-left-radius: 0;
        }
    } @else if $side == left {
        margin-right: $tail-size;
        right: 100%;
        @if $corner == center {
            top: 50%;
        }
        @if $corner == bottom {
            border-top-right-radius: 0;
        }
        @if $corner == top {
            border-bottom-right-radius: 0;
        }
    }

    @if $corner == left {
        right: 50%;

    } @else if $corner == right {
        left: 50%;

    } @else if $corner == bottom {
        top: 50%;

    } @else if $corner == top {
        bottom: 50%;

    }
}

%top-center {
    @include bubble-positioner(top, center);
}

%top-right {
    @include bubble-positioner(top, right);
}

%top-left {
    @include bubble-positioner(top, left);
}

%bottom-center {
    @include bubble-positioner(bottom, center);
}

%bottom-right {
    @include bubble-positioner(bottom, right);
}

%bottom-left {
    @include bubble-positioner(bottom, left);
}

%right-center {
    @include bubble-positioner(right, center);
}

%right-top {
    @include bubble-positioner(right, top);
}

%right-bottom {
    @include bubble-positioner(right, bottom);
}

%left-center {
    @include bubble-positioner(left, center);
}

%left-top {
    @include bubble-positioner(left, top);
}

%left-bottom {
    @include bubble-positioner(left, bottom);
}
