import { html, LitElement } from 'lit-element';
import { Scopity } from '@eightshapes/scopify';
{{#if slots}}
import { Slotify } from '@eightshapes/slotify';
{{/if}}
import { namespacedStyles } from './esds-{{ lowerCase (dashCase name) }}-styles.js';

/**
 * @element esds-{{ lowerCase (dashCase name) }}
{{#if slots}}
 *
 * @slot - Default slot, put whatever you want in here.
 * @slot content - Insert content in the named "content" slot.
{{/if}}
*
*/

export class Esds{{ pascalCase name }} extends {{#if slots}}Slotify({{/if}}Scopify(LitElement, 'esds'){{#if slots}}){{/if}} {
  static get customElementName() {
    return '{{ lowerCase (dashCase name) }}';
  }

  tatic get properties() {
    return {
      /*
       * Describe the prop here using JSDoc syntax
       * @type {'small'|'medium'|'large'}
       */
      example: { type: String },
      /*
       * The text displayed in the component
       * @type String
       */
      text: { type: String },
    };
  }

  constructor() {
    super();
    // Prop Defaults
    this.example = 'medium';
    this.text = 'Hello World';
  }

  {{#unless slots}}
  /*
   * @ignore
   */
  createRenderRoot() {
    return this; // Prevents lit-element from rendering in shadowDOM
  }

  {{/unless}}
  render() {
    return html`
      <style>
        ${namespacedStyles(this.constructor.customElementNamespace)}
      </style>
      <h1
        class="esds-{{ lowerCase (dashCase name) }}
        esds-{{ lowerCase (dashCase name) }}--${this.example}"
      >
        ${this.text}
      </h1>
      {{#if slots}}
      <s-slot></s-slot>
      <s-slot name="content"></s-slot>
      {{/if}}
    `;
  }
}
