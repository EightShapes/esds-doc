// Two dependencies PLUS node fs
// * sass
// * chokidar

// Watches a .scss file and generates a .js file lit-element can import

const sass = require('sass');
const fs = require('fs');
const path = require('path');

const template =
  "// NOTE: This file is auto-generated, do not edit this file directly\nimport { css, unsafeCSS } from 'lit-element';\nexport default css`${unsafeCSS(`INJECTCSSHERE`)}`;";

// One-liner for current directory
const componentSassFiles = fs
  .readdirSync(path.join('src'))
  .filter(f => path.parse(f).ext === '.scss');

componentSassFiles.forEach(s => {
  const fileWithoutExtension = path.parse(s).name;
  const compressedResult = sass.renderSync({
    file: path.join('src', s),
    outputStyle: 'compressed',
  });

  const result = sass.renderSync({
    file: path.join('src', s),
    sourceMap: true,
    outputStyle: 'expanded',
    outFile: path.join('dist', `${fileWithoutExtension}.css`),
  });

  // Write raw CSS file
  fs.writeFileSync(
    path.join('dist', `${fileWithoutExtension}.css`),
    result.css.toString(),
  );

  // Write the map
  fs.writeFileSync(
    path.join('dist', `${fileWithoutExtension}.css.map`),
    result.map.toString(),
  );

  // Write JS style import
  fs.writeFileSync(
    path.join('src', `${fileWithoutExtension}-styles.js`),
    template.replace(/INJECTCSSHERE/, compressedResult.css.toString()),
  );
});
