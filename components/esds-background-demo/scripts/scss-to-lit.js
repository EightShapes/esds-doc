// Two dependencies PLUS node fs
// * sass

// Watches a .scss file and generates a .js file lit-element can import

const sass = require('sass');
const fs = require('fs');
const path = require('path');
const postcss = require('postcss');
const autoprefixer = require('autoprefixer');

const template =
  "/* eslint-disable */\n// NOTE: This file is auto-generated, do not edit this file directly\nimport { css, unsafeCSS } from 'lit-element';\nexport default css`${unsafeCSS(`INJECTCSSHERE`)}`;"; // eslint-disable-line no-template-curly-in-string

// Search /src directory for all .scss files
const componentSassFiles = fs
  .readdirSync(path.join('src'))
  .filter(f => path.parse(f).ext === '.scss');

fs.mkdirSync('dist', { recursive: true });

componentSassFiles.forEach(s => {
  const fileWithoutExtension = path.parse(s).name;

  // SCSS -> dist/*.css Output
  const result = sass.renderSync({
    file: path.join('src', s),
    sourceMap: true,
    outputStyle: 'expanded',
    includePaths: ['node_modules'],
    outFile: path.join('dist', `${fileWithoutExtension}.css`),
  });

  postcss([autoprefixer({ grid: 'autoplace' })])
    .process(result.css.toString(), { from: undefined })
    .then(apResult => {
      // Write raw CSS file
      fs.writeFileSync(path.join('dist', `${fileWithoutExtension}.css`), apResult.css);

      // Write the map
      fs.writeFileSync(path.join('dist', `${fileWithoutExtension}.css.map`), result.map.toString());
    });

  // SCSS -> Lit Element JS Import
  const compressedResult = sass.renderSync({
    file: path.join('src', s),
    includePaths: ['node_modules'],
    outputStyle: 'compressed',
  });
  postcss([autoprefixer({ grid: 'autoplace' })])
    .process(compressedResult.css.toString(), { from: undefined })
    .then(apResult => {
      fs.writeFileSync(
        path.join('src', `${fileWithoutExtension}-styles.js`),
        template.replace(/INJECTCSSHERE/, apResult.css),
      );
    });
});
